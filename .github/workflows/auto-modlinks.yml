on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"

name: on-commit-to-main

jobs:
  send-pull-requests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0 # Checkout everything to get access to the tags
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
      - name: Update into modlinks and send pull-request
        run: |
          
          CURR_REPO_NAME="${{github.repository}}"
          ACCESS_TOKEN="${{ secrets.ACCESS_TOKEN }}"

          PROJECT_NAME="${{vars.PROJECT_NAME}}"
          USER_NAME="${{vars.USER_NAME }}"
          USER_EMAIL="${{vars.USER_EMAIL }}"
          ASSET_NAME="${{vars.ASSET_NAME}}"
          
          LATEST_TAG=$(git describe --tags --always --abbrev=0)
          REPOSITORY="PrashantMohta/modlinks"
          FOLDER="bin/$REPOSITORY"
          BRANCH_NAME="update-$CURR_REPO_NAME-to-$LATEST_TAG"
          DOWNLOAD_LINK="https://github.com/$CURR_REPO_NAME/releases/download/$LATEST_TAG/$ASSET_NAME"
          #install pip packages
          pip install -r requirements.txt

          # Clone the remote repository and change working directory to the
          # folder it was cloned to.
          git clone \
            --depth=1 \
            --branch=main \
            https://$USER_NAME:$ACCESS_TOKEN@github.com/$REPOSITORY \
            $FOLDER

          cd $FOLDER

          # Setup the committers identity.
          git config user.email "$USER_EMAIL"
          git config user.name "$USER_NAME"

          # Create a new feature branch for the changes.
          git checkout -b $BRANCH_NAME

          # Update the files to the latest version.
          cp -R ../../../.github/workflows/sha256.py ./sha256.py
          cp -R ../../../.github/workflows/update-modlinks.py ./update-modlinks.py

          curl --output $ASSET_NAME $DOWNLOAD_LINK
          SHA256=$(python sha256.py $ASSET_NAME)
          python update-modlinks.py $PROJECT_NAME $LATEST_TAG $DOWNLOAD_LINK $SHA256

          # Commit the changes and push the feature branch to origin
          git add ModLinks.xml
          git commit -m "update $PROJECT_NAME to $LATEST_TAG"
          git push origin $BRANCH_NAME
          echo  $ACCESS_TOKEN > pat.txt
          # Authorize GitHub CLI for the current repository and
          # create a pull-requests containing the updates.
          gh auth login --with-token < pat.txt
          gh pr create \
            --body "" \
            --title "Update $PROJECT_NAME to $LATEST_TAG" \
            --head "$BRANCH_NAME" \
            --base "main"
